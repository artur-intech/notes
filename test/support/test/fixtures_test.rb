# frozen_string_literal: true

require 'test_helper'

class FixturesTest < Minitest::Test
  def test_represents_itself_as_hash
    fixtures = Fixtures.new('test/support/test/fixtures.yml', pg_connection)

    actual = fixtures.to_hash

    acme = OpenStruct.new({ 'name' => 'acme ltd',
                            'created_at' => Time.parse('1970-01-01 08:00:00'),
                            'id' => 1,
                            'employee_count' => 2 })
    john = OpenStruct.new({ 'id' => 1,
                            'company_id' => 1 })
    assert_equal 1, pg_connection.exec('SELECT COUNT(*) FROM companies').getvalue(0, 0), 'Db row must be inserted'
    assert_equal ({ companies: { acme: }, employees: { john: } }), actual
  end

  private

  def setup
    setup_db
  end

  def teardown
    clean_up_db
  end

  def setup_db
    sql = <<-SQL
      CREATE TABLE companies (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                              name varchar NOT NULL,
                              employee_count integer NOT NULL,
                              created_at timestamp NOT NULL);
      CREATE TABLE employees (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                              company_id integer NOT NULL REFERENCES companies);
    SQL
    pg_connection.exec(sql)
  end

  def clean_up_db
    pg_connection.exec('DROP TABLE companies, employees;')
  end
end
